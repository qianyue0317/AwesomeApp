本项目是一个基于MVP架构的开源项目
功能的描述:
    技术文章
    树莓派控制

技术的运用:
    使用RemoteView,使用进程通信
    单元测试,注意使用手势监听,ViewDragHelper,注意使用wifi,数据网络接口,还有蓝牙,摄像头,以及语音
    api,usb数据交换,定位,短信拦截,电话监听.流量统计.
    混合开发,h5和原生交互开发
    混淆打包,加固加密
    考虑6.0的权限及其他特性问题

项目结构:
    animate:动画相关工具类.
    base包:相关基类,如BaseActivity,BaseFragment等,对通用操作进行一定的封装,减少重复代码;
    ui包:存放相关自定义控件,自定义风格的ProgressDialog,自定义风格的titlebar等 ;
    utils:相关工具类,如网络请求,时间处理等;
    global:全局相关的类,例Application
    constants:常量类

值得学习的东西:
    视频框架:ExoPlayer(视频列表)
    音频框架:android-UniversalMusicPlayer,RxAndroidAudio,ExoMedia,MusicBobber

    视频缓存:AndroidVideoCache
    控件:SwipeBackLayout(侧滑退出)ShortcutBadger(桌面图标消息提醒),Android-Bootstrap,FoldableLayout(折叠效果),
    ,NineGridImageView(九宫格图片) yalantis    Fancybuttons(各种按钮),AndroidAudioRecorde
    3dTagCloudAndroid(3d动态标签) LoopRotarySwitch(旋转木马效果)AndroidSwipeLayout(侧滑控件)  AndroidViewHover
    circular-progress-button(加载button)  BigImageViewer(大图预览)
    MPAndroidChart(表格) Android-PickerView(时间选择)  XRecyclerView   UnderLineLinearLayout(时间轴)
    加载进度动画: Android-SpinKit
    UltimateRecyclerView
    动画:Material-Animations(Activity的切换),recyclerview-animators(RecyclerView动画)
    AndroidViewAnimations  Android-ConvenientBanner(轮播图) MarqueeView(垂直跑马灯)
    腾讯随身调试:GT

使用框架:
    注入框架:ButterKnife dagger2
    网络请求:Retrofit + RxJava
    数据库框架:litepal
    图片加载框架:Glide(picasso)
    注意项目中需要对这些框架进行二次封装

命名规范:
    包名:驼峰式,首字母小写,尽量见名知义,例如:presenterImpl;
    类名:驼峰式,首字母大写,见名知义,采取 功能+组件名称 的形式 ,例如 LoginActivity(登录+活动);
    变量名:
        静态变量:s前缀,驼峰法, 例: sLoginUrl;
        静态常量:全部大写,见名知义,单词间用"_"分隔,例:LOGIN_URL;
        实例变量:驼峰式,首字母为"m",后接 功能+类型名(缩写) 例:mLoginBtn;
        本地变量:驼峰式, 见名知义即可;
    xml布局文件:全部小写,采用 组件名+功能(或者缩写) 中间用"_"连接,例:activity_login;
    xml其他文件(动画,selector):同xml布局文件命名方式;
    xml中的id:全部小写,采用 类型名+功能(或者缩写) 中间用"_"连接,例:btn_login;

资源管理:
    颜色:一律采用在color文件中定义的;
    尺寸:通用的尺寸在values中定义;
    字符串:通用的字符串要在strings文件中定义;

控件(页面)风格:
    统一Dialog风格,与主题颜色类似

代码风格:
    统一Log形式,自定义Log,tag为"J4U"
    注意xml布局的复用,对用常用的布局结构可抽取出来通过include进行添加
    一定注意Style的抽取
    通用控件最好封装,便于修改

崩溃处理:
    bugly

写代码是业务逻辑要理清楚,清晰的条理

抓取生活中常用网站或者app的接口 集成到一个app中

按键抖动的处理不应该放在BaseActivity中

edittext inputFilter的编写
